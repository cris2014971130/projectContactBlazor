@page "/search"
@using BlazorApp1.Shared;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h3>Buscar Contacto</h3>

<EditForm Model="@_contact">
    <div class="form-group">
        <label>Nombre del Contacto: </label>
        <InputText @bind-Value="name" />
        <button type="submit" class="btn btn-success" @onclick="(() => searchByName(name))">Buscar Contacto</button>
    </div>
</EditForm>

<div class="alert alert-secondary mt-4">
    <span class="oi oi-person me-2" aria-hidden="true"></span>
    <strong>Información del contacto</strong><br><br>

    <span class="text-nowrap">
        <p>Nombre: @nameSearch</p>
        <p>Teléfono: @landline</p>
        <p>Celular: @cellphone</p>
    </span>
</div>

<div class="alert alert-secondary mt-4">
        <span class="oi oi-person me-2" aria-hidden="true"></span>
    <strong>Información del Mensaje</strong><br><br>
    <span class="text-nowrap">
    <p>Mensaje: @message</p>
    </span>
</div>

@code {
    private Contact _contact = new();
    private string name;
    private string nameSearch;
    private string landline;
    private string cellphone;
    private string message;

    private async Task searchByName(string name){
        if(validateInfo(name)){
            Contact contactRes = await Http.GetFromJsonAsync<Contact>($"/api/Contact/{name}");
            if(contactRes.name != null || contactRes.phone != null ||   contactRes.cellphone != null){
                nameSearch = contactRes.name;
                landline = contactRes.phone;
                cellphone = contactRes.cellphone;
            }else{
                 await JsRuntime.InvokeVoidAsync("alert", "No se encontro el contacto buscado");
            }
        }else{
            message = "No ha llenado el formulario correctamente";
        }
    }

    private bool validateInfo(string name){
        if(name == null || name == ""){
            return false;
        }
        return true;
    }
}